<?xml version="1.0"?>
<summary fileFormatVersion="101" isInterface="true">
	<methods>
		<method id="java.util.Optional findFirst()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.Optional: java.lang.Object value]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.Optional findAny()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.Optional: java.lang.Object value]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter"
						ParameterIndex="0"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter"
						ParameterIndex="1"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.stream.Stream distinct()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.stream.Stream filter(java.util.function.Predicate)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<!-- We need to build a proper gap here -->
		<method id="java.util.stream.Stream flatMap(java.util.function.Function)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.stream.IntStream flatMapToInt(java.util.function.Function)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.stream.LongStream flatMapToLong(java.util.function.Function)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>

		<!-- TODO: other functions that require a proper gap -->

		<method id="java.util.stream.Stream of(java.lang.Object[])">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter"
						ParameterIndex="0" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.stream.Stream of(java.lang.Object)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter"
						ParameterIndex="0" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.Optional reduce(java.util.Function.BinaryOperator)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.Optional: java.lang.Object value]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.Optional reduce(java.lang.Object,java.util.Function.BinaryOperator)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.Optional: java.lang.Object value]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter"
						ParameterIndex="0" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.lang.Object reduce(java.lang.Object,java.util.Function.BiFunction,java.util.Function.BinaryOperator)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return" />
				</flow>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Parameter"
						ParameterIndex="0" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="java.util.Optional skip(long)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.Optional: java.lang.Object value]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.Optional sorted()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.Optional: java.lang.Object value]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.util.Optional sorted(java.util.Comparator)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return"
						AccessPath="[java.util.Optional: java.lang.Object value]"
						AccessPathTypes="[java.lang.Object]" />
				</flow>
			</flows>
		</method>
		<method id="java.lang.Object[] toArray()">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
		<method id="java.lang.Object[] toArray(java.util.function.IntFunction)">
			<flows>
				<flow isAlias="false" typeChecking="false">
					<from sourceSinkType="Field"
						AccessPath="[java.util.stream.Stream: java.lang.Object innerCollection]"
						AccessPathTypes="[java.lang.Object]" />
					<to sourceSinkType="Return" />
				</flow>
			</flows>
		</method>
	</methods>
</summary>